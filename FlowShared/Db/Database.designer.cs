#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FlowShared.Db
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Flow")]
	public partial class DatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertActivity(Activity instance);
    partial void UpdateActivity(Activity instance);
    partial void DeleteActivity(Activity instance);
    partial void InsertWorkflow(Workflow instance);
    partial void UpdateWorkflow(Workflow instance);
    partial void DeleteWorkflow(Workflow instance);
    partial void InsertExecution(Execution instance);
    partial void UpdateExecution(Execution instance);
    partial void DeleteExecution(Execution instance);
    partial void InsertExecutionState(ExecutionState instance);
    partial void UpdateExecutionState(ExecutionState instance);
    partial void DeleteExecutionState(ExecutionState instance);
    partial void InsertHistory(History instance);
    partial void UpdateHistory(History instance);
    partial void DeleteHistory(History instance);
    partial void InsertServer(Server instance);
    partial void UpdateServer(Server instance);
    partial void DeleteServer(Server instance);
    partial void InsertTaskList(TaskList instance);
    partial void UpdateTaskList(TaskList instance);
    partial void DeleteTaskList(TaskList instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertVariable(Variable instance);
    partial void UpdateVariable(Variable instance);
    partial void DeleteVariable(Variable instance);
    partial void InsertWorker(Worker instance);
    partial void UpdateWorker(Worker instance);
    partial void DeleteWorker(Worker instance);
    #endregion
		
		public DatabaseDataContext() : 
				base(global::FlowShared.Properties.Settings.Default.FlowConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Activity> Activities
		{
			get
			{
				return this.GetTable<Activity>();
			}
		}
		
		public System.Data.Linq.Table<Workflow> Workflows
		{
			get
			{
				return this.GetTable<Workflow>();
			}
		}
		
		public System.Data.Linq.Table<Execution> Executions
		{
			get
			{
				return this.GetTable<Execution>();
			}
		}
		
		public System.Data.Linq.Table<ExecutionState> ExecutionStates
		{
			get
			{
				return this.GetTable<ExecutionState>();
			}
		}
		
		public System.Data.Linq.Table<History> Histories
		{
			get
			{
				return this.GetTable<History>();
			}
		}
		
		public System.Data.Linq.Table<Server> Servers
		{
			get
			{
				return this.GetTable<Server>();
			}
		}
		
		public System.Data.Linq.Table<TaskList> TaskLists
		{
			get
			{
				return this.GetTable<TaskList>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Variable> Variables
		{
			get
			{
				return this.GetTable<Variable>();
			}
		}
		
		public System.Data.Linq.Table<Worker> Workers
		{
			get
			{
				return this.GetTable<Worker>();
			}
		}
		
		public System.Data.Linq.Table<WorkflowConfig> WorkflowConfigs
		{
			get
			{
				return this.GetTable<WorkflowConfig>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Activities")]
	public partial class Activity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private long _Version;
		
		private string _Description;
		
		private string _Json;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnVersionChanging(long value);
    partial void OnVersionChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnJsonChanging(string value);
    partial void OnJsonChanged();
    #endregion
		
		public Activity()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(40) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Json", DbType="NVarChar(MAX)")]
		public string Json
		{
			get
			{
				return this._Json;
			}
			set
			{
				if ((this._Json != value))
				{
					this.OnJsonChanging(value);
					this.SendPropertyChanging();
					this._Json = value;
					this.SendPropertyChanged("Json");
					this.OnJsonChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Workflows")]
	public partial class Workflow : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private long _Version;
		
		private string _Description;
		
		private string _Json;
		
		private EntitySet<Execution> _Executions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnVersionChanging(long value);
    partial void OnVersionChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnJsonChanging(string value);
    partial void OnJsonChanged();
    #endregion
		
		public Workflow()
		{
			this._Executions = new EntitySet<Execution>(new Action<Execution>(this.attach_Executions), new Action<Execution>(this.detach_Executions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(40) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Json", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Json
		{
			get
			{
				return this._Json;
			}
			set
			{
				if ((this._Json != value))
				{
					this.OnJsonChanging(value);
					this.SendPropertyChanging();
					this._Json = value;
					this.SendPropertyChanged("Json");
					this.OnJsonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Workflow_Execution", Storage="_Executions", ThisKey="Name,Version", OtherKey="WorkflowName,WorkflowVersion")]
		public EntitySet<Execution> Executions
		{
			get
			{
				return this._Executions;
			}
			set
			{
				this._Executions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Executions(Execution entity)
		{
			this.SendPropertyChanging();
			entity.Workflow = this;
		}
		
		private void detach_Executions(Execution entity)
		{
			this.SendPropertyChanging();
			entity.Workflow = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Executions")]
	public partial class Execution : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ExecutionId;
		
		private string _WorkflowName;
		
		private long _WorkflowVersion;
		
		private string _DecisionList;
		
		private System.Nullable<int> _ExecutionStartToCloseTimeout;
		
		private System.Nullable<int> _TaskStartToCloseTimeout;
		
		private System.Nullable<int> _TaskScheduleToStartTimeout;
		
		private string _TaskScheduleToCloseTimeout;
		
		private int _HistorySeen;
		
		private System.Nullable<System.DateTime> _DeciderAlarm;
		
		private bool _AwaitingDecision;
		
		private System.Nullable<System.DateTime> _LastSeen;
		
		private System.Nullable<System.Guid> _DeciderToken;
		
		private string _JobId;
		
		private EntityRef<ExecutionState> _ExecutionState;
		
		private EntitySet<History> _Histories;
		
		private EntitySet<TaskList> _TaskLists;
		
		private EntitySet<Variable> _Variables;
		
		private EntityRef<Workflow> _Workflow;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExecutionIdChanging(System.Guid value);
    partial void OnExecutionIdChanged();
    partial void OnWorkflowNameChanging(string value);
    partial void OnWorkflowNameChanged();
    partial void OnWorkflowVersionChanging(long value);
    partial void OnWorkflowVersionChanged();
    partial void OnDecisionListChanging(string value);
    partial void OnDecisionListChanged();
    partial void OnExecutionStartToCloseTimeoutChanging(System.Nullable<int> value);
    partial void OnExecutionStartToCloseTimeoutChanged();
    partial void OnTaskStartToCloseTimeoutChanging(System.Nullable<int> value);
    partial void OnTaskStartToCloseTimeoutChanged();
    partial void OnTaskScheduleToStartTimeoutChanging(System.Nullable<int> value);
    partial void OnTaskScheduleToStartTimeoutChanged();
    partial void OnTaskScheduleToCloseTimeoutChanging(string value);
    partial void OnTaskScheduleToCloseTimeoutChanged();
    partial void OnHistorySeenChanging(int value);
    partial void OnHistorySeenChanged();
    partial void OnDeciderAlarmChanging(System.Nullable<System.DateTime> value);
    partial void OnDeciderAlarmChanged();
    partial void OnAwaitingDecisionChanging(bool value);
    partial void OnAwaitingDecisionChanged();
    partial void OnLastSeenChanging(System.Nullable<System.DateTime> value);
    partial void OnLastSeenChanged();
    partial void OnDeciderTokenChanging(System.Nullable<System.Guid> value);
    partial void OnDeciderTokenChanged();
    partial void OnJobIdChanging(string value);
    partial void OnJobIdChanged();
    #endregion
		
		public Execution()
		{
			this._ExecutionState = default(EntityRef<ExecutionState>);
			this._Histories = new EntitySet<History>(new Action<History>(this.attach_Histories), new Action<History>(this.detach_Histories));
			this._TaskLists = new EntitySet<TaskList>(new Action<TaskList>(this.attach_TaskLists), new Action<TaskList>(this.detach_TaskLists));
			this._Variables = new EntitySet<Variable>(new Action<Variable>(this.attach_Variables), new Action<Variable>(this.detach_Variables));
			this._Workflow = default(EntityRef<Workflow>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecutionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ExecutionId
		{
			get
			{
				return this._ExecutionId;
			}
			set
			{
				if ((this._ExecutionId != value))
				{
					this.OnExecutionIdChanging(value);
					this.SendPropertyChanging();
					this._ExecutionId = value;
					this.SendPropertyChanged("ExecutionId");
					this.OnExecutionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkflowName", DbType="NVarChar(40) NOT NULL", CanBeNull=false)]
		public string WorkflowName
		{
			get
			{
				return this._WorkflowName;
			}
			set
			{
				if ((this._WorkflowName != value))
				{
					if (this._Workflow.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkflowNameChanging(value);
					this.SendPropertyChanging();
					this._WorkflowName = value;
					this.SendPropertyChanged("WorkflowName");
					this.OnWorkflowNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkflowVersion", DbType="BigInt NOT NULL")]
		public long WorkflowVersion
		{
			get
			{
				return this._WorkflowVersion;
			}
			set
			{
				if ((this._WorkflowVersion != value))
				{
					if (this._Workflow.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkflowVersionChanging(value);
					this.SendPropertyChanging();
					this._WorkflowVersion = value;
					this.SendPropertyChanged("WorkflowVersion");
					this.OnWorkflowVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DecisionList", DbType="NVarChar(40) NOT NULL", CanBeNull=false)]
		public string DecisionList
		{
			get
			{
				return this._DecisionList;
			}
			set
			{
				if ((this._DecisionList != value))
				{
					this.OnDecisionListChanging(value);
					this.SendPropertyChanging();
					this._DecisionList = value;
					this.SendPropertyChanged("DecisionList");
					this.OnDecisionListChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecutionStartToCloseTimeout", DbType="Int")]
		public System.Nullable<int> ExecutionStartToCloseTimeout
		{
			get
			{
				return this._ExecutionStartToCloseTimeout;
			}
			set
			{
				if ((this._ExecutionStartToCloseTimeout != value))
				{
					this.OnExecutionStartToCloseTimeoutChanging(value);
					this.SendPropertyChanging();
					this._ExecutionStartToCloseTimeout = value;
					this.SendPropertyChanged("ExecutionStartToCloseTimeout");
					this.OnExecutionStartToCloseTimeoutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskStartToCloseTimeout", DbType="Int")]
		public System.Nullable<int> TaskStartToCloseTimeout
		{
			get
			{
				return this._TaskStartToCloseTimeout;
			}
			set
			{
				if ((this._TaskStartToCloseTimeout != value))
				{
					this.OnTaskStartToCloseTimeoutChanging(value);
					this.SendPropertyChanging();
					this._TaskStartToCloseTimeout = value;
					this.SendPropertyChanged("TaskStartToCloseTimeout");
					this.OnTaskStartToCloseTimeoutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskScheduleToStartTimeout", DbType="Int")]
		public System.Nullable<int> TaskScheduleToStartTimeout
		{
			get
			{
				return this._TaskScheduleToStartTimeout;
			}
			set
			{
				if ((this._TaskScheduleToStartTimeout != value))
				{
					this.OnTaskScheduleToStartTimeoutChanging(value);
					this.SendPropertyChanging();
					this._TaskScheduleToStartTimeout = value;
					this.SendPropertyChanged("TaskScheduleToStartTimeout");
					this.OnTaskScheduleToStartTimeoutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskScheduleToCloseTimeout", DbType="NChar(10)")]
		public string TaskScheduleToCloseTimeout
		{
			get
			{
				return this._TaskScheduleToCloseTimeout;
			}
			set
			{
				if ((this._TaskScheduleToCloseTimeout != value))
				{
					this.OnTaskScheduleToCloseTimeoutChanging(value);
					this.SendPropertyChanging();
					this._TaskScheduleToCloseTimeout = value;
					this.SendPropertyChanged("TaskScheduleToCloseTimeout");
					this.OnTaskScheduleToCloseTimeoutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HistorySeen", DbType="Int NOT NULL")]
		public int HistorySeen
		{
			get
			{
				return this._HistorySeen;
			}
			set
			{
				if ((this._HistorySeen != value))
				{
					this.OnHistorySeenChanging(value);
					this.SendPropertyChanging();
					this._HistorySeen = value;
					this.SendPropertyChanged("HistorySeen");
					this.OnHistorySeenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeciderAlarm", DbType="DateTime2")]
		public System.Nullable<System.DateTime> DeciderAlarm
		{
			get
			{
				return this._DeciderAlarm;
			}
			set
			{
				if ((this._DeciderAlarm != value))
				{
					this.OnDeciderAlarmChanging(value);
					this.SendPropertyChanging();
					this._DeciderAlarm = value;
					this.SendPropertyChanged("DeciderAlarm");
					this.OnDeciderAlarmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AwaitingDecision", DbType="Bit NOT NULL")]
		public bool AwaitingDecision
		{
			get
			{
				return this._AwaitingDecision;
			}
			set
			{
				if ((this._AwaitingDecision != value))
				{
					this.OnAwaitingDecisionChanging(value);
					this.SendPropertyChanging();
					this._AwaitingDecision = value;
					this.SendPropertyChanged("AwaitingDecision");
					this.OnAwaitingDecisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastSeen", DbType="DateTime2")]
		public System.Nullable<System.DateTime> LastSeen
		{
			get
			{
				return this._LastSeen;
			}
			set
			{
				if ((this._LastSeen != value))
				{
					this.OnLastSeenChanging(value);
					this.SendPropertyChanging();
					this._LastSeen = value;
					this.SendPropertyChanged("LastSeen");
					this.OnLastSeenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeciderToken", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DeciderToken
		{
			get
			{
				return this._DeciderToken;
			}
			set
			{
				if ((this._DeciderToken != value))
				{
					this.OnDeciderTokenChanging(value);
					this.SendPropertyChanging();
					this._DeciderToken = value;
					this.SendPropertyChanged("DeciderToken");
					this.OnDeciderTokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobId", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string JobId
		{
			get
			{
				return this._JobId;
			}
			set
			{
				if ((this._JobId != value))
				{
					this.OnJobIdChanging(value);
					this.SendPropertyChanging();
					this._JobId = value;
					this.SendPropertyChanged("JobId");
					this.OnJobIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Execution_ExecutionState", Storage="_ExecutionState", ThisKey="ExecutionId", OtherKey="ExecutionId", IsUnique=true, IsForeignKey=false)]
		public ExecutionState ExecutionState
		{
			get
			{
				return this._ExecutionState.Entity;
			}
			set
			{
				ExecutionState previousValue = this._ExecutionState.Entity;
				if (((previousValue != value) 
							|| (this._ExecutionState.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExecutionState.Entity = null;
						previousValue.Execution = null;
					}
					this._ExecutionState.Entity = value;
					if ((value != null))
					{
						value.Execution = this;
					}
					this.SendPropertyChanged("ExecutionState");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Execution_History", Storage="_Histories", ThisKey="ExecutionId", OtherKey="ExecutionId")]
		public EntitySet<History> Histories
		{
			get
			{
				return this._Histories;
			}
			set
			{
				this._Histories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Execution_TaskList", Storage="_TaskLists", ThisKey="ExecutionId", OtherKey="ExecutionId")]
		public EntitySet<TaskList> TaskLists
		{
			get
			{
				return this._TaskLists;
			}
			set
			{
				this._TaskLists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Execution_Variable", Storage="_Variables", ThisKey="ExecutionId", OtherKey="ExecutionId")]
		public EntitySet<Variable> Variables
		{
			get
			{
				return this._Variables;
			}
			set
			{
				this._Variables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Workflow_Execution", Storage="_Workflow", ThisKey="WorkflowName,WorkflowVersion", OtherKey="Name,Version", IsForeignKey=true)]
		public Workflow Workflow
		{
			get
			{
				return this._Workflow.Entity;
			}
			set
			{
				Workflow previousValue = this._Workflow.Entity;
				if (((previousValue != value) 
							|| (this._Workflow.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Workflow.Entity = null;
						previousValue.Executions.Remove(this);
					}
					this._Workflow.Entity = value;
					if ((value != null))
					{
						value.Executions.Add(this);
						this._WorkflowName = value.Name;
						this._WorkflowVersion = value.Version;
					}
					else
					{
						this._WorkflowName = default(string);
						this._WorkflowVersion = default(long);
					}
					this.SendPropertyChanged("Workflow");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Histories(History entity)
		{
			this.SendPropertyChanging();
			entity.Execution = this;
		}
		
		private void detach_Histories(History entity)
		{
			this.SendPropertyChanging();
			entity.Execution = null;
		}
		
		private void attach_TaskLists(TaskList entity)
		{
			this.SendPropertyChanging();
			entity.Execution = this;
		}
		
		private void detach_TaskLists(TaskList entity)
		{
			this.SendPropertyChanging();
			entity.Execution = null;
		}
		
		private void attach_Variables(Variable entity)
		{
			this.SendPropertyChanging();
			entity.Execution = this;
		}
		
		private void detach_Variables(Variable entity)
		{
			this.SendPropertyChanging();
			entity.Execution = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExecutionStates")]
	public partial class ExecutionState : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ExecutionId;
		
		private string _State;
		
		private EntityRef<Execution> _Execution;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExecutionIdChanging(System.Guid value);
    partial void OnExecutionIdChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    #endregion
		
		public ExecutionState()
		{
			this._Execution = default(EntityRef<Execution>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecutionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ExecutionId
		{
			get
			{
				return this._ExecutionId;
			}
			set
			{
				if ((this._ExecutionId != value))
				{
					if (this._Execution.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExecutionIdChanging(value);
					this.SendPropertyChanging();
					this._ExecutionId = value;
					this.SendPropertyChanged("ExecutionId");
					this.OnExecutionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Execution_ExecutionState", Storage="_Execution", ThisKey="ExecutionId", OtherKey="ExecutionId", IsForeignKey=true)]
		public Execution Execution
		{
			get
			{
				return this._Execution.Entity;
			}
			set
			{
				Execution previousValue = this._Execution.Entity;
				if (((previousValue != value) 
							|| (this._Execution.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Execution.Entity = null;
						previousValue.ExecutionState = null;
					}
					this._Execution.Entity = value;
					if ((value != null))
					{
						value.ExecutionState = this;
						this._ExecutionId = value.ExecutionId;
					}
					else
					{
						this._ExecutionId = default(System.Guid);
					}
					this.SendPropertyChanged("Execution");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Histories")]
	public partial class History : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ExecutionId;
		
		private int _Id;
		
		private string _EventType;
		
		private System.DateTime _Timestamp;
		
		private string _Json;
		
		private EntityRef<Execution> _Execution;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExecutionIdChanging(System.Guid value);
    partial void OnExecutionIdChanged();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEventTypeChanging(string value);
    partial void OnEventTypeChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnJsonChanging(string value);
    partial void OnJsonChanged();
    #endregion
		
		public History()
		{
			this._Execution = default(EntityRef<Execution>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecutionId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ExecutionId
		{
			get
			{
				return this._ExecutionId;
			}
			set
			{
				if ((this._ExecutionId != value))
				{
					if (this._Execution.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExecutionIdChanging(value);
					this.SendPropertyChanging();
					this._ExecutionId = value;
					this.SendPropertyChanged("ExecutionId");
					this.OnExecutionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string EventType
		{
			get
			{
				return this._EventType;
			}
			set
			{
				if ((this._EventType != value))
				{
					this.OnEventTypeChanging(value);
					this.SendPropertyChanging();
					this._EventType = value;
					this.SendPropertyChanged("EventType");
					this.OnEventTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="DateTime2 NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Json", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Json
		{
			get
			{
				return this._Json;
			}
			set
			{
				if ((this._Json != value))
				{
					this.OnJsonChanging(value);
					this.SendPropertyChanging();
					this._Json = value;
					this.SendPropertyChanged("Json");
					this.OnJsonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Execution_History", Storage="_Execution", ThisKey="ExecutionId", OtherKey="ExecutionId", IsForeignKey=true)]
		public Execution Execution
		{
			get
			{
				return this._Execution.Entity;
			}
			set
			{
				Execution previousValue = this._Execution.Entity;
				if (((previousValue != value) 
							|| (this._Execution.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Execution.Entity = null;
						previousValue.Histories.Remove(this);
					}
					this._Execution.Entity = value;
					if ((value != null))
					{
						value.Histories.Add(this);
						this._ExecutionId = value.ExecutionId;
					}
					else
					{
						this._ExecutionId = default(System.Guid);
					}
					this.SendPropertyChanged("Execution");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Servers")]
	public partial class Server : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private System.Nullable<int> _UserId;
		
		private string _Description;
		
		private EntitySet<Worker> _Workers;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Server()
		{
			this._Workers = new EntitySet<Worker>(new Action<Worker>(this.attach_Workers), new Action<Worker>(this.detach_Workers));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Server_Worker", Storage="_Workers", ThisKey="Name", OtherKey="ServerName")]
		public EntitySet<Worker> Workers
		{
			get
			{
				return this._Workers;
			}
			set
			{
				this._Workers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Server", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Servers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Servers.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Workers(Worker entity)
		{
			this.SendPropertyChanging();
			entity.Server = this;
		}
		
		private void detach_Workers(Worker entity)
		{
			this.SendPropertyChanging();
			entity.Server = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TaskLists")]
	public partial class TaskList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ListName;
		
		private System.Guid _ExecutionId;
		
		private int _Priority;
		
		private int _TaskScheduledEventId;
		
		private System.Guid _TaskToken;
		
		private System.DateTime _TaskAlarm;
		
		private System.Nullable<int> _HeartbeatTimeout;
		
		private System.Nullable<System.DateTime> _HeartbeatAlarm;
		
		private string _WorkerId;
		
		private bool _Cancelling;
		
		private System.DateTime _ScheduledAt;
		
		private System.Nullable<int> _TaskSheduleToCloseTimeout;
		
		private System.Nullable<int> _TaskStartToCloseTimeout;
		
		private System.Nullable<int> _Progress;
		
		private string _ProgressMessage;
		
		private System.Nullable<System.DateTime> _StartedAt;
		
		private string _NotificationData;
		
		private string _ProgressData;
		
		private string _JobId;
		
		private EntityRef<Execution> _Execution;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnListNameChanging(string value);
    partial void OnListNameChanged();
    partial void OnExecutionIdChanging(System.Guid value);
    partial void OnExecutionIdChanged();
    partial void OnPriorityChanging(int value);
    partial void OnPriorityChanged();
    partial void OnTaskScheduledEventIdChanging(int value);
    partial void OnTaskScheduledEventIdChanged();
    partial void OnTaskTokenChanging(System.Guid value);
    partial void OnTaskTokenChanged();
    partial void OnTaskAlarmChanging(System.DateTime value);
    partial void OnTaskAlarmChanged();
    partial void OnHeartbeatTimeoutChanging(System.Nullable<int> value);
    partial void OnHeartbeatTimeoutChanged();
    partial void OnHeartbeatAlarmChanging(System.Nullable<System.DateTime> value);
    partial void OnHeartbeatAlarmChanged();
    partial void OnWorkerIdChanging(string value);
    partial void OnWorkerIdChanged();
    partial void OnCancellingChanging(bool value);
    partial void OnCancellingChanged();
    partial void OnScheduledAtChanging(System.DateTime value);
    partial void OnScheduledAtChanged();
    partial void OnTaskSheduleToCloseTimeoutChanging(System.Nullable<int> value);
    partial void OnTaskSheduleToCloseTimeoutChanged();
    partial void OnTaskStartToCloseTimeoutChanging(System.Nullable<int> value);
    partial void OnTaskStartToCloseTimeoutChanged();
    partial void OnProgressChanging(System.Nullable<int> value);
    partial void OnProgressChanged();
    partial void OnProgressMessageChanging(string value);
    partial void OnProgressMessageChanged();
    partial void OnStartedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnStartedAtChanged();
    partial void OnNotificationDataChanging(string value);
    partial void OnNotificationDataChanged();
    partial void OnProgressDataChanging(string value);
    partial void OnProgressDataChanged();
    partial void OnJobIdChanging(string value);
    partial void OnJobIdChanged();
    #endregion
		
		public TaskList()
		{
			this._Execution = default(EntityRef<Execution>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ListName", DbType="NVarChar(40) NOT NULL", CanBeNull=false)]
		public string ListName
		{
			get
			{
				return this._ListName;
			}
			set
			{
				if ((this._ListName != value))
				{
					this.OnListNameChanging(value);
					this.SendPropertyChanging();
					this._ListName = value;
					this.SendPropertyChanged("ListName");
					this.OnListNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecutionId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ExecutionId
		{
			get
			{
				return this._ExecutionId;
			}
			set
			{
				if ((this._ExecutionId != value))
				{
					if (this._Execution.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExecutionIdChanging(value);
					this.SendPropertyChanging();
					this._ExecutionId = value;
					this.SendPropertyChanged("ExecutionId");
					this.OnExecutionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Priority", DbType="Int NOT NULL")]
		public int Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this.OnPriorityChanging(value);
					this.SendPropertyChanging();
					this._Priority = value;
					this.SendPropertyChanged("Priority");
					this.OnPriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskScheduledEventId", DbType="Int NOT NULL")]
		public int TaskScheduledEventId
		{
			get
			{
				return this._TaskScheduledEventId;
			}
			set
			{
				if ((this._TaskScheduledEventId != value))
				{
					this.OnTaskScheduledEventIdChanging(value);
					this.SendPropertyChanging();
					this._TaskScheduledEventId = value;
					this.SendPropertyChanged("TaskScheduledEventId");
					this.OnTaskScheduledEventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskToken", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid TaskToken
		{
			get
			{
				return this._TaskToken;
			}
			set
			{
				if ((this._TaskToken != value))
				{
					this.OnTaskTokenChanging(value);
					this.SendPropertyChanging();
					this._TaskToken = value;
					this.SendPropertyChanged("TaskToken");
					this.OnTaskTokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskAlarm", DbType="DateTime2 NOT NULL")]
		public System.DateTime TaskAlarm
		{
			get
			{
				return this._TaskAlarm;
			}
			set
			{
				if ((this._TaskAlarm != value))
				{
					this.OnTaskAlarmChanging(value);
					this.SendPropertyChanging();
					this._TaskAlarm = value;
					this.SendPropertyChanged("TaskAlarm");
					this.OnTaskAlarmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeartbeatTimeout", DbType="Int")]
		public System.Nullable<int> HeartbeatTimeout
		{
			get
			{
				return this._HeartbeatTimeout;
			}
			set
			{
				if ((this._HeartbeatTimeout != value))
				{
					this.OnHeartbeatTimeoutChanging(value);
					this.SendPropertyChanging();
					this._HeartbeatTimeout = value;
					this.SendPropertyChanged("HeartbeatTimeout");
					this.OnHeartbeatTimeoutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeartbeatAlarm", DbType="DateTime2")]
		public System.Nullable<System.DateTime> HeartbeatAlarm
		{
			get
			{
				return this._HeartbeatAlarm;
			}
			set
			{
				if ((this._HeartbeatAlarm != value))
				{
					this.OnHeartbeatAlarmChanging(value);
					this.SendPropertyChanging();
					this._HeartbeatAlarm = value;
					this.SendPropertyChanged("HeartbeatAlarm");
					this.OnHeartbeatAlarmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkerId", DbType="NVarChar(20)")]
		public string WorkerId
		{
			get
			{
				return this._WorkerId;
			}
			set
			{
				if ((this._WorkerId != value))
				{
					this.OnWorkerIdChanging(value);
					this.SendPropertyChanging();
					this._WorkerId = value;
					this.SendPropertyChanged("WorkerId");
					this.OnWorkerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cancelling", DbType="Bit NOT NULL")]
		public bool Cancelling
		{
			get
			{
				return this._Cancelling;
			}
			set
			{
				if ((this._Cancelling != value))
				{
					this.OnCancellingChanging(value);
					this.SendPropertyChanging();
					this._Cancelling = value;
					this.SendPropertyChanged("Cancelling");
					this.OnCancellingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScheduledAt", DbType="DateTime2 NOT NULL")]
		public System.DateTime ScheduledAt
		{
			get
			{
				return this._ScheduledAt;
			}
			set
			{
				if ((this._ScheduledAt != value))
				{
					this.OnScheduledAtChanging(value);
					this.SendPropertyChanging();
					this._ScheduledAt = value;
					this.SendPropertyChanged("ScheduledAt");
					this.OnScheduledAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskSheduleToCloseTimeout", DbType="Int")]
		public System.Nullable<int> TaskSheduleToCloseTimeout
		{
			get
			{
				return this._TaskSheduleToCloseTimeout;
			}
			set
			{
				if ((this._TaskSheduleToCloseTimeout != value))
				{
					this.OnTaskSheduleToCloseTimeoutChanging(value);
					this.SendPropertyChanging();
					this._TaskSheduleToCloseTimeout = value;
					this.SendPropertyChanged("TaskSheduleToCloseTimeout");
					this.OnTaskSheduleToCloseTimeoutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskStartToCloseTimeout", DbType="Int")]
		public System.Nullable<int> TaskStartToCloseTimeout
		{
			get
			{
				return this._TaskStartToCloseTimeout;
			}
			set
			{
				if ((this._TaskStartToCloseTimeout != value))
				{
					this.OnTaskStartToCloseTimeoutChanging(value);
					this.SendPropertyChanging();
					this._TaskStartToCloseTimeout = value;
					this.SendPropertyChanged("TaskStartToCloseTimeout");
					this.OnTaskStartToCloseTimeoutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Progress", DbType="Int")]
		public System.Nullable<int> Progress
		{
			get
			{
				return this._Progress;
			}
			set
			{
				if ((this._Progress != value))
				{
					this.OnProgressChanging(value);
					this.SendPropertyChanging();
					this._Progress = value;
					this.SendPropertyChanged("Progress");
					this.OnProgressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProgressMessage", DbType="NVarChar(MAX)")]
		public string ProgressMessage
		{
			get
			{
				return this._ProgressMessage;
			}
			set
			{
				if ((this._ProgressMessage != value))
				{
					this.OnProgressMessageChanging(value);
					this.SendPropertyChanging();
					this._ProgressMessage = value;
					this.SendPropertyChanged("ProgressMessage");
					this.OnProgressMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartedAt", DbType="DateTime2")]
		public System.Nullable<System.DateTime> StartedAt
		{
			get
			{
				return this._StartedAt;
			}
			set
			{
				if ((this._StartedAt != value))
				{
					this.OnStartedAtChanging(value);
					this.SendPropertyChanging();
					this._StartedAt = value;
					this.SendPropertyChanged("StartedAt");
					this.OnStartedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotificationData", DbType="NVarChar(MAX)")]
		public string NotificationData
		{
			get
			{
				return this._NotificationData;
			}
			set
			{
				if ((this._NotificationData != value))
				{
					this.OnNotificationDataChanging(value);
					this.SendPropertyChanging();
					this._NotificationData = value;
					this.SendPropertyChanged("NotificationData");
					this.OnNotificationDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProgressData", DbType="NVarChar(MAX)")]
		public string ProgressData
		{
			get
			{
				return this._ProgressData;
			}
			set
			{
				if ((this._ProgressData != value))
				{
					this.OnProgressDataChanging(value);
					this.SendPropertyChanging();
					this._ProgressData = value;
					this.SendPropertyChanged("ProgressData");
					this.OnProgressDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobId", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string JobId
		{
			get
			{
				return this._JobId;
			}
			set
			{
				if ((this._JobId != value))
				{
					this.OnJobIdChanging(value);
					this.SendPropertyChanging();
					this._JobId = value;
					this.SendPropertyChanged("JobId");
					this.OnJobIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Execution_TaskList", Storage="_Execution", ThisKey="ExecutionId", OtherKey="ExecutionId", IsForeignKey=true)]
		public Execution Execution
		{
			get
			{
				return this._Execution.Entity;
			}
			set
			{
				Execution previousValue = this._Execution.Entity;
				if (((previousValue != value) 
							|| (this._Execution.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Execution.Entity = null;
						previousValue.TaskLists.Remove(this);
					}
					this._Execution.Entity = value;
					if ((value != null))
					{
						value.TaskLists.Add(this);
						this._ExecutionId = value.ExecutionId;
					}
					else
					{
						this._ExecutionId = default(System.Guid);
					}
					this.SendPropertyChanged("Execution");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _UserName;
		
		private string _Password;
		
		private EntitySet<Server> _Servers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public User()
		{
			this._Servers = new EntitySet<Server>(new Action<Server>(this.attach_Servers), new Action<Server>(this.detach_Servers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Server", Storage="_Servers", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Server> Servers
		{
			get
			{
				return this._Servers;
			}
			set
			{
				this._Servers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Servers(Server entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Servers(Server entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Variables")]
	public partial class Variable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ExecutionId;
		
		private string _Name;
		
		private string _Json;
		
		private EntityRef<Execution> _Execution;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExecutionIdChanging(System.Guid value);
    partial void OnExecutionIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnJsonChanging(string value);
    partial void OnJsonChanged();
    #endregion
		
		public Variable()
		{
			this._Execution = default(EntityRef<Execution>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecutionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ExecutionId
		{
			get
			{
				return this._ExecutionId;
			}
			set
			{
				if ((this._ExecutionId != value))
				{
					if (this._Execution.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExecutionIdChanging(value);
					this.SendPropertyChanging();
					this._ExecutionId = value;
					this.SendPropertyChanged("ExecutionId");
					this.OnExecutionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(40) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Json", DbType="NVarChar(MAX)")]
		public string Json
		{
			get
			{
				return this._Json;
			}
			set
			{
				if ((this._Json != value))
				{
					this.OnJsonChanging(value);
					this.SendPropertyChanging();
					this._Json = value;
					this.SendPropertyChanged("Json");
					this.OnJsonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Execution_Variable", Storage="_Execution", ThisKey="ExecutionId", OtherKey="ExecutionId", IsForeignKey=true)]
		public Execution Execution
		{
			get
			{
				return this._Execution.Entity;
			}
			set
			{
				Execution previousValue = this._Execution.Entity;
				if (((previousValue != value) 
							|| (this._Execution.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Execution.Entity = null;
						previousValue.Variables.Remove(this);
					}
					this._Execution.Entity = value;
					if ((value != null))
					{
						value.Variables.Add(this);
						this._ExecutionId = value.ExecutionId;
					}
					else
					{
						this._ExecutionId = default(System.Guid);
					}
					this.SendPropertyChanged("Execution");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Workers")]
	public partial class Worker : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _WorkerId;
		
		private string _WorkerName;
		
		private string _ServerName;
		
		private string _PackageName;
		
		private string _Config;
		
		private System.Nullable<int> _ProcessId;
		
		private EntityRef<Server> _Server;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWorkerIdChanging(System.Guid value);
    partial void OnWorkerIdChanged();
    partial void OnWorkerNameChanging(string value);
    partial void OnWorkerNameChanged();
    partial void OnServerNameChanging(string value);
    partial void OnServerNameChanged();
    partial void OnPackageNameChanging(string value);
    partial void OnPackageNameChanged();
    partial void OnConfigChanging(string value);
    partial void OnConfigChanged();
    partial void OnProcessIdChanging(System.Nullable<int> value);
    partial void OnProcessIdChanged();
    #endregion
		
		public Worker()
		{
			this._Server = default(EntityRef<Server>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkerId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid WorkerId
		{
			get
			{
				return this._WorkerId;
			}
			set
			{
				if ((this._WorkerId != value))
				{
					this.OnWorkerIdChanging(value);
					this.SendPropertyChanging();
					this._WorkerId = value;
					this.SendPropertyChanged("WorkerId");
					this.OnWorkerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkerName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string WorkerName
		{
			get
			{
				return this._WorkerName;
			}
			set
			{
				if ((this._WorkerName != value))
				{
					this.OnWorkerNameChanging(value);
					this.SendPropertyChanging();
					this._WorkerName = value;
					this.SendPropertyChanged("WorkerName");
					this.OnWorkerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ServerName
		{
			get
			{
				return this._ServerName;
			}
			set
			{
				if ((this._ServerName != value))
				{
					if (this._Server.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServerNameChanging(value);
					this.SendPropertyChanging();
					this._ServerName = value;
					this.SendPropertyChanged("ServerName");
					this.OnServerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PackageName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PackageName
		{
			get
			{
				return this._PackageName;
			}
			set
			{
				if ((this._PackageName != value))
				{
					this.OnPackageNameChanging(value);
					this.SendPropertyChanging();
					this._PackageName = value;
					this.SendPropertyChanged("PackageName");
					this.OnPackageNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Config", DbType="NVarChar(MAX)")]
		public string Config
		{
			get
			{
				return this._Config;
			}
			set
			{
				if ((this._Config != value))
				{
					this.OnConfigChanging(value);
					this.SendPropertyChanging();
					this._Config = value;
					this.SendPropertyChanged("Config");
					this.OnConfigChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcessId", DbType="Int")]
		public System.Nullable<int> ProcessId
		{
			get
			{
				return this._ProcessId;
			}
			set
			{
				if ((this._ProcessId != value))
				{
					this.OnProcessIdChanging(value);
					this.SendPropertyChanging();
					this._ProcessId = value;
					this.SendPropertyChanged("ProcessId");
					this.OnProcessIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Server_Worker", Storage="_Server", ThisKey="ServerName", OtherKey="Name", IsForeignKey=true)]
		public Server Server
		{
			get
			{
				return this._Server.Entity;
			}
			set
			{
				Server previousValue = this._Server.Entity;
				if (((previousValue != value) 
							|| (this._Server.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Server.Entity = null;
						previousValue.Workers.Remove(this);
					}
					this._Server.Entity = value;
					if ((value != null))
					{
						value.Workers.Add(this);
						this._ServerName = value.Name;
					}
					else
					{
						this._ServerName = default(string);
					}
					this.SendPropertyChanged("Server");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkflowConfigs")]
	public partial class WorkflowConfig
	{
		
		private string _WorkflowName;
		
		private System.Nullable<long> _WorkflowVersion;
		
		private string _Json;
		
		public WorkflowConfig()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkflowName", DbType="NVarChar(40) NOT NULL", CanBeNull=false)]
		public string WorkflowName
		{
			get
			{
				return this._WorkflowName;
			}
			set
			{
				if ((this._WorkflowName != value))
				{
					this._WorkflowName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkflowVersion", DbType="BigInt")]
		public System.Nullable<long> WorkflowVersion
		{
			get
			{
				return this._WorkflowVersion;
			}
			set
			{
				if ((this._WorkflowVersion != value))
				{
					this._WorkflowVersion = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Json", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Json
		{
			get
			{
				return this._Json;
			}
			set
			{
				if ((this._Json != value))
				{
					this._Json = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
